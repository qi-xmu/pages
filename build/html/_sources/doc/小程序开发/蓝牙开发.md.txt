# 小程序开发-蓝牙使用

[TOC]

## 参考文献

[蓝牙 - uni-app官网 (dcloud.io)](https://uniapp.dcloud.io/api/system/bluetooth) 

[低功耗蓝牙 - uni-app官网 (dcloud.io)](https://uniapp.dcloud.io/api/system/ble?id=writeblecharacteristicvalue) 

[小程序连蓝牙，发送数据_yqlnihao的博客-CSDN博客](https://blog.csdn.net/yqlnihao/article/details/119455845) 

[DataView.prototype.setUint8() - JavaScript | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8) 

[js中ASCII码和字符互相转换的方法 - weiqinl - 博客园 (cnblogs.com)](https://www.cnblogs.com/weiqinl/p/10575727.html) 

## 使用方法

### 检查蓝牙状态

```js
uni.openBluetoothAdapter();
```

### 搜索设备

开始搜索

```js
uni.startBluetoothDevicesDiscovery()
```

绑定回调，一旦发现新设备执行。这一步可以筛选出自己需要连接的设备进行连接。

```js
uni.onBluetoothDeviceFound()
```

搜索返回信息如下

```json
{
  "deviceId": "98:DA:20:00:AA:3C",
  "name": "WuYin-V1",
  "RSSI": -62,
  "localName": "WuYin-V1\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
  "advertisServiceUUIDs": ["00004353-0000-1000-8000-00805F9B34FB"]
}
```

### 连接设备

连接设备，这一步需要已知设备的`deviceId`，通过搜索结果可以得到这个值。连接成功后需要停止搜索

```js
uni.createBLEConnection()
uni.stopBluetoothDevicesDiscovery()
```

### 查询服务

在成功连接后延时一秒执行，查询服务列表，获取服务的`uuid`

```js
uni.getBLEDeviceServices() // 查询服务列表
```

服务列表示例如下，不同服务的权限是不同的。通过测试，这里使用的是最后一个服务，其服务的`uuid=0000FFE0-0000-1000-8000-00805F9B34FB`。

```json
{
  "services": [{
    "uuid": "00001800-0000-1000-8000-00805F9B34FB",
    "isPrimary": true
  }, {
    "uuid": "00001801-0000-1000-8000-00805F9B34FB",
    "isPrimary": true
  }, {
    "uuid": "0000180A-0000-1000-8000-00805F9B34FB",
    "isPrimary": true
  }, {
    "uuid": "0000FFE0-0000-1000-8000-00805F9B34FB",
    "isPrimary": true
  }],
  "errMsg": "getBLEDeviceServices:ok"
}
```

### 查询特征值ID

通过服务查询该服务的特征值权限（需要`devieceId`和`serviceId`），一个服务可以有短多个特征值，特征值的权限有`read` `write` `notify` `indicate`。一般使用`write`（向蓝牙发送信息）和`notify`（监控蓝牙发送的信息并回调）。

```js
uni.getBLEDeviceCharacteristics()
```

```json
[{
  "uuid": "0000FFE1-0000-1000-8000-00805F9B34FB",
  "properties": {
    "read": false,
    "write": false,
    "notify": true,
    "indicate": false
  }
}, {
  "uuid": "0000FFE2-0000-1000-8000-00805F9B34FB",
  "properties": {
    "read": false,
    "write": true,
    "notify": false,
    "indicate": false
  }
}]
```

### 监控接收信息

启动`notify`功能，监控蓝牙发送的信息。需要传入`state` `deviceId` `serviceId` `characteristicId`。其中`state`状态为`true`则打开该服务。

```js
uni.notifyBLECharacteristicValueChange()
```

传入回调函数，当收到蓝牙信息时被调用。

```js
uni.onBLECharacteristicValueChange()
```

接收的信息为`Arraybuffer`，需要先转成16进制，再转成字符串。

[js中ASCII码和字符互相转换的方法 - weiqinl - 博客园 (cnblogs.com)](https://www.cnblogs.com/weiqinl/p/10575727.html) 

```js
/* buffer转16进制 */
function ab2hex(buffer) {
  const hexArr = Array.prototype.map.call(
    new Uint8Array(buffer),
    function(bit) {
      return ('00' + bit.toString(16)).slice(-2)
    }
  )
  return hexArr.join(' ')
}
/* 16进制转字符串 */
function hextoString(hex) {
  var arr = hex.split(' ')
  console.log(arr)
  var out = ""
  for (var i = 0; i < arr.length; i++) {
    var tmp = Number("0x" + arr[i])
    var charValue = String.fromCodePoint(tmp)
    out += charValue
  }
}
```

### 发送信息

发送信息，需要将信息转成`Arraybuffer`的类型。

[DataView.prototype.setUint8() - JavaScript | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8) 

```js
function stringtoHex(str){
	var arr = str.split('')
	const buffer = new ArrayBuffer(str.length)
	const dataView = new DataView(buffer)
	console.log(arr, str.length)
	for(var i in arr){
		var num = arr[i].charCodeAt()
		console.log(num)
		dataView.setUint8(i,num)
	}
	return buffer
}
```

发送信息函数

```js
uni.writeBLECharacteristicValue({
  // 这里的 deviceId 需要在 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
  deviceId: this.deviceId,
  // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取
  serviceId: this.services[3].uuid,
  // 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取
  characteristicId: this.charactersRead,
  // 这里的value是ArrayBuffer类型
  value: stringtoHex(this.value),
  success(res) {
  console.log('writeBLECharacteristicValue success', res.errMsg)
  }
});
```

## 完整代码

```vue
<template>
  <view class="u-margin-20 ">
    <!-- 连接状态指示 -->
    <view class="u-margin-20 u-flex u-row-center">
      <view class="u-margin-right-10">
        <text style="font-weight: bold;">连接状态(点击标签连接):</text>
      </view>
      <u-tag v-if="!searching & !connected" text="未连接" @click="connect_dev" type="error" />
      <view v-else-if="searching & !connected">
        <u-tag  text="正在连接" type="warning"></u-tag>
        <u-loading class="u-margin-left-10" mode="circle"></u-loading>
      </view>
      <u-tag v-else text="已连接" type="success" />
    </view>
    <!-- 信息发送框 -->
    <view id="base" class="list u-padding-20 u-flex-col">
      <u-input v-model="value" type="text" :border="true" />
      <u-button class="u-margin-20" type="primary" @click="test_send">发送</u-button>
    </view>

  </view>
</template>

<script>
  /* buffer转16进制 */
  function ab2hex(buffer) {
    const hexArr = Array.prototype.map.call(
      new Uint8Array(buffer),
      function(bit) {
        return ('00' + bit.toString(16)).slice(-2)
      }
    )
    return hexArr.join(' ')
  }
  /* 16进制转字符串 */
  function hextoString(hex) {
    var arr = hex.split(' ')
    console.log(arr)
    var out = ""
    for (var i = 0; i < arr.length; i++) {
      var tmp = Number("0x" + arr[i])
      var charValue = String.fromCodePoint(tmp)
      out += charValue
    }
    return out
  }
  /* 字符串转成可发送的buffer */
  function stringtoHex(str){
    var arr = str.split('')
    const buffer = new ArrayBuffer(str.length)
    const dataView = new DataView(buffer)
    
    console.log(arr, str.length)
    for(var i in arr){
      var num = arr[i].charCodeAt()
      console.log(num)
      dataView.setUint8(i,num)
    }
    return buffer
  }

  export default {
    data() {
      return {
        value: "",
        searching: false,
        connected: false,
        deviceId: "",
        services: [],
        charactersWrite: "",
        charactersNotify: "",
      }
    },
    methods: {
      test_send() {
        console.log(this.value);
        if (this.connected == false) {
          uni.showToast({
            title: "请连接设备",
            icon: "none"
          })
        } else {
          uni.writeBLECharacteristicValue({
            // 这里的 deviceId 需要在 getBluetoothDevices 或 onBluetoothDeviceFound 接口中获取
            deviceId: this.deviceId,
            // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取
            serviceId: this.services[3].uuid,
            // 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取
            characteristicId: this.charactersRead,
            // 这里的value是ArrayBuffer类型
            value: stringtoHex(this.value),
            success(res) {
              console.log('writeBLECharacteristicValue success', res.errMsg)
            }
          });
        }
      },
      open_blu() {
        uni.openBluetoothAdapter({
          success(res) {
            console.log(res.errMsg)
          }
        });
      },
      connect_dev() {
        var self = this
        console.log("search..")
        this.searching = true;
        // 连接
        uni.startBluetoothDevicesDiscovery({
          success(res) {
            // 搜索连接设备 
            uni.onBluetoothDeviceFound(function(res) {
              if (res.devices[0].name == "WuYin-V1") {
                console.log(res.devices[0]);
                // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接
                self.deviceId = res.devices[0].deviceId
                uni.createBLEConnection({
                  deviceId: self.deviceId,
                  success(res) {
                    console.log(res)
                    self.stop_search()
                    self.bind_notify()
                  }
                });
              }
            });
          }
        })
      },
      stop_search() {
        console.log("stop..")
        uni.stopBluetoothDevicesDiscovery({
          success(res) {
            console.log(res)
          }
        });
      },
      bind_notify() {
        setTimeout(() => {
          uni.getBLEDeviceServices({
            // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接
            deviceId: this.deviceId,
            success: (res) => {
              // console.log("成功",res)
              console.log('device services:', res)
              this.services = res.services
              uni.getBLEDeviceCharacteristics({
                deviceId: this.deviceId,
                serviceId: this.services[3].uuid,
                success: (res) => {
                  this.charactersNotify = res.characteristics[0].uuid
                  this.charactersRead = res.characteristics[1].uuid
                  console.log(res.characteristics)
                }
              });
            }
          });
        }, 1000);
        setTimeout(() => {
          console.log("deviceID", this.deviceId)
          console.log("Service", this.services[3].uuid)
          console.log("Notify", this.charactersNotify)
          console.log("Read", this.charactersRead)
          uni.notifyBLECharacteristicValueChange({
            state: true, // 启用 notify 功能
            // 这里的 deviceId 需要已经通过 createBLEConnection 与对应设备建立链接
            deviceId: this.deviceId,
            // 这里的 serviceId 需要在 getBLEDeviceServices 接口中获取
            serviceId: this.services[3].uuid,
            // 这里的 characteristicId 需要在 getBLEDeviceCharacteristics 接口中获取
            characteristicId: this.charactersNotify,
            success(res) {
              console.log('notifyBLECharacteristicValueChange success', res.errMsg)
              self.connected = true
              self.searching = false
              uni.showToast({
                title: "连接成功"
              });
              /* 绑定回调 */
              uni.onBLECharacteristicValueChange(function(res) {
                console.log(`characteristic ${res.characteristicId} has changed`)
                console.log(res)
                /* 这个是接收的信息，为十六进制 */
                console.log(ab2hex(res.value))
                console.log(hextoString(ab2hex(res.value)))
              });
            }
          });
        }, 1500);
      }
    },
    onShow() {
      // 检测蓝牙是否开启 
      this.open_blu()
    }
  }
</script>

<style>
</style>
```

